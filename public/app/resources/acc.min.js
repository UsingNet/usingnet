!function () {
    if (!XMLHttpRequest || !WebSocket)return !1;
    var a = {XMLHttpRequest: XMLHttpRequest}, b = {
        proxy: "wss://" + location.host.replace("app.", "ws.") + "/acc",
        __connector: null,
        __requestBuffer: [],
        cookie: [],
        userAgent: [],
        active: document.cookie.indexOf("developer=1") >= 0,
        getConnector: function () {
            var e, a = this, c = {}, d = {
                request_method: {GET: "g", POST: "p", DELETE: "d", PUT: "u"},
                __counter: 0,
                generatorKey: function () {
                    return (this.__counter++).toString()
                },
                encode: function (a, b, e, f, g) {
                    var h = this, i = d.generatorKey();
                    return c[i] = {
                        method: a.toUpperCase(),
                        header: e,
                        url: b,
                        data: f,
                        callback: g
                    }, JSON.stringify({m: h.request_method[a.toUpperCase()].toLowerCase(), u: b, h: e, d: f, k: i})
                },
                decode: function (a) {
                    var b = JSON.parse(a), d = c[b.k];
                    return delete c[b.k], {
                        request: {method: d.method, url: d.url, header: d.header, data: d.data},
                        response: {status: b.s, statusText: b.st, header: b.h, data: b.d},
                        callback: d.callback
                    }
                }
            };
            return a.__connector || (e = null, a.__connector = {
                send: function (c, f, g, h, i) {
                    "undefined" == typeof i && (i = null), "undefined" == typeof h && (h = null), e ? e.readyState == WebSocket.OPEN ? e.send(d.encode(c, f, g, h, i)) : a.__requestBuffer.push(arguments) : (a.__requestBuffer.push(arguments), e = new WebSocket(b.proxy + "?url=" + encodeURIComponent([location.protocol, "//" + location.host + location.pathname].join(""))), e.onopen = function () {
                        for (var b; b = a.__requestBuffer.pop();)a.__connector.send.apply(a.__connector, b)
                    }, e.onmessage = function (a) {
                        var b = d.decode(a.data);
                        "function" == typeof b.callback && b.callback(b.request, b.response)
                    })
                }
            }), a.__connector
        }
    };
    XMLHttpRequest = function () {
        var b = this;
        this["native"] = new a.XMLHttpRequest, this["native"].onerror = function () {
            try {
                b.readyState = this.readyState, b.status = this.status, b.statusText = this.statusText, b.responseText = this.responseText, b.response = this.response, "function" == typeof b.onerror && b.onerror.apply(this, arguments)
            } catch(e) {}
        }, this["native"].onabort = function () {
            try {
                b.readyState = this.readyState, b.status = this.status, b.statusText = this.statusText, b.responseText = this.responseText, b.response = this.response, "function" == typeof b.onabort && b.onabort.apply(this, arguments), b.abort()
            } catch(e) {}
        }, this["native"].onreadystatechange = function () {
            try {
                b.readyState = this.readyState, b.status = this.status, b.statusText = this.statusText, b.responseText = this.responseText, b.response = this.response, "function" == typeof b.onreadystatechange && b.onreadystatechange.apply(this, arguments)
            } catch(e) {}
        }, this["native"].onload = function () {
            try {
                b.readyState = this.readyState, b.status = this.status, b.statusText = this.statusText, b.responseText = this.responseText, b.response = this.response, "function" == typeof b.onload && b.onload.apply(this, arguments)
            } catch(e) {}
        }, this.abort()
    }, XMLHttpRequest.prototype.abort = function () {
        this.readyState = 0, this.__header = {}, this.__request = {}, this.__responseHeader = "", this.status = 0, this.statusText = "", this.responseText = "", this.response = "", this.__async = !0, this["native"].abort()
    }, XMLHttpRequest.prototype.open = function (a, c, d, e, f) {
        var g = this, h = a.toUpperCase();
        this.__async = d, this.__async && b.active ? (this.readyState = 1, "function" == typeof this.onreadystatechange && this.onreadystatechange(g), this.__request = {
            method: a,
            url: c,

            async: d,
            username: e,
            password: f
        }) : (this["native"].open.apply(this["native"], arguments), this.native.open.call(this.native, "GET" == h ? "GET" : "POST", c, d, e, f), this.setRequestHeader("X-Http-Method-Override", h))
    }, XMLHttpRequest.prototype.overrideMimeType = function (a) {
        this.__async && b.active ? this.setRequestHeader("Content-Type", a) : this["native"].overrideMimeType.apply(this["native"], arguments)
    }, XMLHttpRequest.prototype.setRequestHeader = function (a, c) {
        this.__async && b.active ? this.__header[a] = c : this["native"].setRequestHeader.apply(this["native"], arguments)
    }, XMLHttpRequest.prototype.getAllResponseHeaders = function () {
        return this.__async && b.active ? this.__responseHeader : this["native"].getAllResponseHeaders.apply(this["native"], arguments)
    }, XMLHttpRequest.prototype.send = function (a) {
        if (XMLHttpRequest.isCloseTheRequest) {
            return;
        }
        var c, d;
        return this.__async && b.active ? (c = this, c.readyState = 2, "function" == typeof c.onreadystatechange && c.onreadystatechange(c), d = !1, b.getConnector().send(c.__request.method, c.__request.url, c.__header, a, function (a, b) {
            switch (c.readyState = 4, c.status = b.status, c.statusText = b.statusText, c.responseText = b.data, c.response = b.data, c.__responseHeader = b.header, b.status.toString().substr(0, 1)) {
                case"2":
                    "function" == typeof c.onload && c.onload(c);
                    break;
                default:
                    "function" == typeof c.onerror && c.onerror(c)
            }
            "function" == typeof c.onreadystatechange && c.onreadystatechange(c), d = !0
        }), void 0) : this["native"].send.apply(this["native"], arguments)
    }
}();
